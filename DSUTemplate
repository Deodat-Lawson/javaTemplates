/*
Quick Union
*/

public class DSUQuickUnion {
    int[] id; //stores the id of the Node
    int[] size; //size of component for roots
    int count; //number of components

    DSUQuickUnion(int N){
        count = N;
        id = new int[N];
        for(int i = 0; i < N; i++){
            id[i] = i;
        }

        size = new int[N];
        for (int i = 0; i < N; i++) {
            size[i] = 1;
        }
    }


    public int getCount(){
        return count;
    }

    public boolean connected(int p, int q){
        return find(p) == find(q);
    }

    public int find(int p){
        while(p != id[p]){ //if the node is not a root, then it goes to its id until it finds its root
             p = id[p];
        }
        return p; //returns the root
    }

    public void union(int p, int q){
        int i = find(p);
        int j = find(q);
        if(i == j){
            return;
        }

        //makes the smaller root points to the larger one
        if(size[i] < size[j]){
            id[i] = j;
            size[j] += size[i];
        }
        else{
            id[j] = i;
            size[i] += size[j];
        }

        count--;

    }

}
